services:
  backend:
    container_name: backend
    build:
      context: ./requirements/backend
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=project.settings
    networks:
      - ft_transcendence
    expose:
      - 8000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 1m
      timeout: 10s
      retries: 5

  frontend:
    container_name: frontend
    build:
      context: ./requirements/frontend
      dockerfile: Dockerfile
    networks:
      - ft_transcendence
    volumes:
      - frontend_build:/usr/src/app/dist
    restart: "no"
    healthcheck:
      test: ["CMD", "test", "-f", "/usr/src/app/build/index.html"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  nginx:
    container_name: nginx-modsecurity
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
      - "8081:8081"
    volumes:
      - frontend_build:/usr/share/nginx/html
    networks:
      - ft_transcendence
    depends_on:
      - frontend
    secrets:
      - ssl_certificate
      - ssl_certificate_key
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 30s
      retries: 5

  postgres:
    container_name: postgres
    build:
      context: ./requirements/postgres-db
      dockerfile: Dockerfile
    ports:
      - '5432:5432'
    networks:
      - ft_transcendence
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}   
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  prometheus:
    container_name: prometheus
    build:
      context: ./requirements/monitoring/prometheus
      dockerfile: Dockerfile
      args:
        - PROMETHEUS_PASSWORD=${PROMETHEUS_PASSWORD}
    volumes:
      - ./requirements/monitoring/prometheus/data:/prometheus/data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.config.file=/etc/prometheus/web.yml'
    ports:
      - "9090:9090"
    networks:
      - ft_transcendence
    restart: unless-stopped

  grafana:
    build:
      context: ./requirements/monitoring/grafana
      dockerfile: Dockerfile
    container_name: grafana
    volumes:
      - ./requirements/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./requirements/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./requirements/monitoring/grafana/data:/var/lib/grafana/data
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/cadvisor.json
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/ssl/certificate.crt
      - GF_SERVER_CERT_KEY=/etc/ssl/certificate.key
      - PROMETHEUS_PASSWORD=${PROMETHEUS_PASSWORD}
    ports:
      - "3000:3000"
    networks:
      - ft_transcendence
    restart: unless-stopped
    depends_on:
      - prometheus

  cadvisor:
    container_name: cadvisor
    restart: always
    privileged: true
    build:
      context: ./requirements/monitoring/exporters/cadvisor
      dockerfile: Dockerfile
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - ft_transcendence

  alertmanager:
    container_name: alertmanager
    restart: always
    build:
      context: ./requirements/monitoring/alertmanager
      dockerfile: Dockerfile
      args:
        - SMTP_TO=${SMTP_TO}
        - SMTP_FROM=${SMTP_FROM}
        - SMTP_SMARTHOST=${SMTP_SMARTHOST}
        - SMTP_AUTH_USERNAME=${SMTP_AUTH_USERNAME}
        - SMTP_AUTH_IDENTITY=${SMTP_AUTH_IDENTITY}
        - SMTP_AUTH_PASSWORD=${SMTP_AUTH_PASSWORD}
    volumes:
      - ./requirements/monitoring/alertmanager/data:/alertmanager/data
    networks:
      - ft_transcendence
    ports:
      - '9093:9093'
    depends_on:
      - prometheus

  nginx-exporter:
    container_name: nginx-exporter
    build:
      context: ./requirements/monitoring/exporters/nginx-exporter
      dockerfile: Dockerfile
    ports:
      - "9113:9113"
    networks:
      - ft_transcendence
    depends_on:
      - nginx
    restart: unless-stopped

  node-exporter:
    container_name: node-exporter
    build:
      context: ./requirements/monitoring/exporters/node-exporter
      dockerfile: Dockerfile
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - ft_transcendence
    restart: unless-stopped

  postgres-exporter:
    container_name: postgres-exporter
    restart: always
    build:
      context: ./requirements/monitoring/exporters/postgres-exporter
      dockerfile: Dockerfile
    environment:
      - DATA_SOURCE_NAME=${DATA_SOURCE_NAME}
    networks:
      - ft_transcendence

networks:
  ft_transcendence:
    name: ft_transcendence
    driver: bridge

volumes:
  frontend_build:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /home/${USER}/data/
      o: bind

secrets:
  ssl_certificate:
    file: ../secrets/ssl/certificate.crt
  ssl_certificate_key:
    file: ../secrets/ssl/certificate.key
