<template>
  <div class="login">
    <img src="@/pages/LoginPage/components/img/login-bg.png" alt="background" class="login__bg" />
<!-- collect user input and prevent the page from reloading v-on:submit-->
    <form class="login__form" @submit.prevent="handleSubmit"> 
      <h1 class="login__title">Login</h1>

      <div class="login__inputs">
        <div class="login__box">
          <input 
            type="email" 
            v-model="email" 
            placeholder="Email ID" 
            required 
            class="login__input" 
          />
          <i class="ri-mail-fill"></i>
        </div>

        <div class="login__box">
          <input 
            type="password" 
            v-model="password" 
            placeholder="Password" 
            required 
            class="login__input" 
          />
          <i class="ri-lock-2-fill"></i>
        </div>
      </div>

      <div v-if="errors.length" class="bg-red-300 text-white rounded-lg p-6 mb-4">
        <p v-for="(error, index) in errors" :key="index">{{ error }}</p>
      </div>

      <div class="login__check">
        <div class="login__check-box">
          <input 
            type="checkbox" 
            id="remember-me" 
            v-model="rememberMe" 
            class="login__check-input" 
          />
          <label for="remember-me" class="login__check-label">Remember me</label>
        </div>
        <router-link to="/forgot-password" class="login__forgot">Forgot Password?</router-link>
      </div>

      <button 
        type="submit" 
        class="login__button"
        :disabled="loading"
      >
        {{ loading ? 'Logging in...' : 'Login' }}
      </button>

      <div class="login__register">
        Don't have an account? <router-link to="/register">Register</router-link>
      </div>

      <div class="login__oauth">
        <button 
          type="button" 
          class="login__oauth-button"
          @click="loginWith42"
        >
          Login with 42
        </button>
      </div>
    </form>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import axios from 'axios';

const router = useRouter();

const email = ref('');
const password = ref('');
const errors = ref([]);
const loading = ref(false);
const rememberMe = ref(false);

methods: {
  loginWith42(){
    const clientId = 'u-s4t2ud-c691b276ef7aa2660fa1d1be08026efd0282c75fdb314fb7307fdcfd7f61d6ce'; //should take from backend
      const redirectUri = encodeURIComponent('http://localhost/game');
      const authUrl = `https://api.intra.42.fr/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=public`;
      window.location.href = authUrl;
  }
}
const handleSubmit = async () => {
  loading.value = true;
  errors.value = [];

  try {
    const response = await axios.post('/api/login/', {
      email: email.value,
      password: password.value,
    });

    if (response.data && response.data.access) {
      console.log("Access token received:", response.data);

      localStorage.setItem('token', response.data.access);
      localStorage.setItem('isAuthenticated', 'true');
      const token = localStorage.getItem('token');

      if (token)
        axios.defaults.headers.common['Authorization'] = "Bearer " + token;
      router.push('/game');

    } else {
      errors.value.push('User is not authenticated.');
    }

  } catch (error) {

    if (error.response && error.response.data) {
      errors.value.push(error.response.data.error || 'An error occurred during login.');

    } else {
      errors.value.push('Network error or server is not available.');
    }

  } finally {
    loading.value = false;
  }
}; 
// login with 42 API


</script> 

<!-- <script setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import { authService } from '@/components/authService';

const router = useRouter();
const email = ref('');
const password = ref('');
const error = ref('');
const loading = ref(false);

const handleSubmit = async () => {
  loading.value = true;
  error.value = '';
  
  try {
    const success = await authService.login(email.value, password.value);
    if (success) {
      router.push('/game');
    }
  } catch (err) {
    error.value = err.message;
  } finally {
    loading.value = false;
  }
};
</script> -->



<style scoped>
@import "@/pages/LoginPage/components/css/styles.css";

.login__forgot {
  color: #007bff;
  text-decoration: none;
}

.login__forgot:hover {
  text-decoration: underline;
}

.bg-red-300 {
  margin: 1rem 0;
}

.login__oauth-button {
  background-color: #007bff;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  margin-top: 20px;
}

.login__oauth-button:hover {
  background-color: #0056b3;
}
</style>