import uuid

from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, UserManager
from django.db import models



class CustomUserManager(UserManager):
    def _create_user(self, name, email, password):
        if not email:
            raise ValueError("You have not provided a valid e-mail address")
        email = self.normalize_email(email)
        user = self.model(name=name, email=email)
        user.set_password(password)
        user.save(using=self._db)
        return user


    def create_user(self, name=None, email=None, password=None):
        return self._create_user(name, email, password)


class User(AbstractBaseUser, PermissionsMixin):
    # id = models.UUIDField(default=uuid.uuid4, editable=False) #randomly generated by uuid.uuid4() the ID is auto-generated for each new record.
    # id = models.UUIDField(primary_key=True, default=uuid.uuid4)
    # uuid = models.UUIDField(
    #     primary_key=True,
    #     default=uuid.uuid4,
    #     editable=False
    # )
    # id = models.BigAutoField(primary_key=True)
    id = models.UUIDField(default=uuid.uuid4, primary_key=True, editable=False)
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255, blank=True, default='')
    avatar = models.ImageField(upload_to='avatars', blank=True, null=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    EMAIL_FIELD = 'email'
    REQUIRED_FIELDS = []

# class User(models.Model):
#     username = models.CharField(max_length=100, unique=True)
#     password = models.CharField(max_length=255)
#     email = models.EmailField(unique=True)

# def _str_(self):
#     self.username

# check for empty names 


# from django.db import models
# from .managers import IntraUserManager
# from django.apps import apps

# class IntraUser(models.Model):
#     objects = IntraUserManager()
#     id = models.BigIntegerField(primary_key=True)
#     intra_login = models.CharField(max_length=8, unique=True)
#     avatar = models.CharField(max_length=100)
#     wallet = models.IntegerField(default=0)
#     last_login = models.DateTimeField(blank=True, null=True)
#     is_active = models.BooleanField(default=True)
#     is_staff = models.BooleanField(default=True)
#     is_anonymous = models.BooleanField(default=False)
#     is_authenticated = models.BooleanField(default=True)
#     USERNAME_FIELD = 'intra_login'
#     REQUIRED_FIELDS = []

#     def has_perm(self, perm, obj=None):
#         return True
#     def has_module_perms(self, request):
#         return True
#     def get_username(self):
#         return self.intra_login
#     def __str__(self):
#         return self.intra_login
